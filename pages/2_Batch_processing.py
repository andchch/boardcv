import asyncio
import base64
import os

from telegram.error import BadRequest, InvalidToken

import modules.telegram_integration as telegram_integration
import modules.utilities as utilities
import streamlit as st

import modules.zulip_integration as zulip_integration

models = ['page', 'page-column-sort', 'handwritten', 'table']

if 'res' not in st.session_state:
    st.session_state.res = {}

st.sidebar.success('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')

st.title('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤')

if not os.path.exists('imgs'):
    os.mkdir('imgs')

# Set the directory for scanning images
local = os.getcwd() + '\\imgs'
st.markdown(f'–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ `{local}` –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')

# Button to preview images in the directory
if st.button('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'):
    imgs = utilities.image_grid()  # Get images from the directory
    if len(imgs) == 0:
        st.warning('–í –ø–∞–ø–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')

# --- OCR model selection and description ---
col1, col2 = st.columns(2)
with col1:
    selected_model = st.radio('–ú–æ–¥–µ–ª—å', models, index=2)
with col2:
    st.markdown('''- ***page*** ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞, —Å–≤–µ—Ä—Å—Ç–∞–Ω–Ω–æ–≥–æ –≤ –æ–¥–Ω—É 
    –∫–æ–ª–æ–Ω–∫—É. \n- ***page-column-sort*** ‚Äî –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. \n- ***handwritten*** ‚Äî –¥–ª—è 
    —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è –ø–µ—á–∞—Ç–Ω–æ–≥–æ –∏ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö. \n- 
    ***table*** ‚Äî –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.''')

# --- Recognize text from all images ---
if st.button('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å'):
    imgs = utilities.image_grid()  # Get images from the directory
    API_KEY = os.getenv('YANDEX_API_KEY')  # Get API key from environment variable
    with st.spinner('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...'):
        st.session_state.res = {}
        for img in imgs:
            # Read and encode image data
            f = open(img, 'rb')
            encoded_string = base64.b64encode(f.read())
            img1 = str(encoded_string)[2:-1]
            f.close()

            # Make OCR request and parse response
            ocr_response = utilities.do_ocr_request(img1, selected_model, API_KEY)
            recognized_text = utilities.parse_ocr_response(ocr_response)

            # Store recognized text and credentials in session state
            st.session_state.text = recognized_text[0]
            st.session_state.creds = recognized_text[1]

            # Store results in the dictionary with image path as key
            st.session_state.res[img] = [st.session_state.text, st.session_state.creds['telegram_username']]

            # Send recognized text to Telegram if username found and exists
            if recognized_text[1]['telegram_username'] is None:
                pass  # No Telegram username found
            elif telegram_integration.get_user_id(st.session_state.creds['telegram_username']) is None:
                pass  # Telegram username not found in database
            else:
                st.success('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º')
                asyncio.run(telegram_integration.send_message(st.session_state.creds['telegram_username'],
                                                              st.session_state.text))

# --- Send results section ---
st.subheader('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
telegram_tab, zulip_tab = st.tabs(['Telegram', 'Zulip'])
with telegram_tab:
    tg_username = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º',
                                help='–í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (@username –∏–ª–∏ username) –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π')
    if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', key=11):
        with st.spinner('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...'):
            for img, v in st.session_state.res.items():
                try:
                    asyncio.run(telegram_integration.send_message(tg_username, v[0], img))
                except BadRequest:
                    st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', icon='üö®')
                except InvalidToken:
                    st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω', icon='üö®')

with zulip_tab:
    zulip_username = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–∞–Ω–∞–ª –≤ Zulip')
    zulip_topic = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ø–∏–∫ –≤ Zulip', help='–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –µ—Å–ª–∏ –≤ –ø–æ–ª–µ –≤—ã—à–µ –≤–≤–µ–¥–µ–Ω ID '
                                                                    '—á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–µ –∫–∞–Ω–∞–ª')
    if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', key=33, on_click=utilities.clean_temp_dir):
        with st.spinner('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...'):
            try:
                zulip_id = int(zulip_username)
                try:
                    for img, v in st.session_state.res.items():
                        zulip_response = zulip_integration.send_message(id=zulip_id, topic=zulip_topic,
                                                                        message=v[0],
                                                                        attachment=img)
                        if zulip_response.get('result') != 'success':
                            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!\n{zulip_response.get('msg')}", icon='üö®')
                except Exception as e:
                    st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n{e}', icon='üö®')
            except ValueError:
                try:
                    for img, v in st.session_state.res.items():
                        zulip_response = zulip_integration.send_message(id=zulip_username, topic=zulip_topic,
                                                                        message=v[0],
                                                                        attachment=img)
                        if zulip_response.get('result') != 'success':
                            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!\n{zulip_response.get('msg')}", icon='üö®')
                except Exception as e:
                    st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n{e}', icon='üö®')
