import os
import base64
import asyncio
import streamlit as st
from telegram.error import BadRequest, InvalidToken
import urllib3
import modules.utilities as utilities
import modules.telegram_integration as telegram_integration
import modules.zulip_integration as zulip_integration

urllib3.disable_warnings()

models = ['page', 'page-column-sort', 'handwritten', 'table']

st.sidebar.success('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')

st.title('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')

uploaded_file = st.file_uploader(label='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞', type=['jpg', 'png'])

# Save uploaded file to a temporary directory
try:
    if not os.path.exists('temp'):
        os.mkdir('temp')
    with open('temp/' + uploaded_file.name, 'wb') as f:
        f.write(uploaded_file.getbuffer())
        filepath = 'temp/' + uploaded_file.name
except AttributeError:
    pass

# Initialize session state variables for recognized text and credentials
if 'text' not in st.session_state:
    st.session_state.text = ''

if 'creds' not in st.session_state:
    st.session_state.creds = {
        'telegram_username': '',
        'email': ''
    }

# --- Process uploaded file ---
if uploaded_file is not None:
    st.image(uploaded_file, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_column_width=True)

    # --- OCR model selection and description ---
    col1, col2 = st.columns(2)
    with col1:
        selected_model = st.radio('–ú–æ–¥–µ–ª—å', models, index=2)
    with col2:
        st.markdown('''- ***page*** ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞, —Å–≤–µ—Ä—Å—Ç–∞–Ω–Ω–æ–≥–æ –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É.
        \n- ***page-column-sort*** ‚Äî –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        \n- ***handwritten*** ‚Äî –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ—á–µ—Ç–∞–Ω–∏—è –ø–µ—á–∞—Ç–Ω–æ–≥–æ –∏ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
        \n- ***table*** ‚Äî –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.''')

    # Recognize text on button click
    if st.button('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å'):
        st.session_state.text = ''
        st.session_state.creds = {
            'telegram_username': '',
            'email': ''
        }
        utilities.clean_temp_dir()

        # Get API key and encode image data
        API_KEY = os.getenv('YANDEX_API_KEY')
        encoded_string = base64.b64encode(uploaded_file.getvalue())
        img = str(encoded_string)[2:-1]

        # Make OCR request and parse response
        ocr_response = utilities.do_ocr_request(img, selected_model, API_KEY)
        recognized_text = utilities.parse_ocr_response(ocr_response)

        # Store recognized text and credentials in session state
        st.session_state.text = recognized_text[0]
        st.session_state.creds = recognized_text[1]

        st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:')
        st.write(recognized_text[0])

        # Check for Telegram username and send message
        if recognized_text[1]['telegram_username'] is None:
            st.toast('–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º', icon='üò¢')
        elif telegram_integration.get_user_id(st.session_state.creds['telegram_username']) is None:
            st.toast('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–ª–∏ –≤–Ω–µ—Å–∏—Ç–µ '
                     '—Ç–µ–ª–µ–≥—Ä–∞–º –≤ –±–æ—Ç–∞', icon='üò¢')
        else:
            st.success('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º')
            asyncio.run(telegram_integration.send_message(st.session_state.creds['telegram_username'],
                                                          st.session_state.text))

    # --- Send results section ---
    st.subheader('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    telegram_tab, zulip_tab = st.tabs(['Telegram', 'Zulip'])
    with telegram_tab:
        tg_username = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º', value=st.session_state.creds['telegram_username'],
                                    help='–í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (@username –∏–ª–∏ username) –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π')
        attach_img = st.toggle(label='–ü—Ä–∏–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', value=True, key=1)
        if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', key=11):
            try:
                if attach_img:
                    asyncio.run(telegram_integration.send_message(tg_username, st.session_state.text, filepath))
                else:
                    asyncio.run(telegram_integration.send_message(tg_username, st.session_state.text))
            except BadRequest:
                st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', icon='üö®')
            except InvalidToken:
                st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω', icon='üö®')

    with zulip_tab:
        zulip_username = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–∞–Ω–∞–ª –≤ Zulip')
        zulip_topic = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ø–∏–∫ –≤ Zulip', help='–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –µ—Å–ª–∏ –≤ –ø–æ–ª–µ –≤—ã—à–µ –≤–≤–µ–¥–µ–Ω ID '
                                                                        '—á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–µ –∫–∞–Ω–∞–ª')
        attach_img = st.toggle(label='–ü—Ä–∏–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', value=True, key=3)
        if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', key=33, on_click=utilities.clean_temp_dir):
            try:
                zulip_id = int(zulip_username)  # Try parsing as user ID
                try:
                    if attach_img:
                        zulip_response = zulip_integration.send_message(id=zulip_id, topic=zulip_topic,
                                                                        message=st.session_state.text,
                                                                        attachment=filepath)
                    else:
                        zulip_response = zulip_integration.send_message(id=zulip_id, topic=zulip_topic,
                                                                        message=st.session_state.text)

                        # Check for Zulip API success
                        if zulip_response.get('result') != 'success':
                            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!\n{zulip_response.get('msg')}", icon='üö®')
                except Exception as e:
                    st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n{e}', icon='üö®')
            except ValueError:  # If not a user ID, assume stream name
                try:
                    if attach_img:
                        zulip_response = zulip_integration.send_message(id=zulip_username, topic=zulip_topic,
                                                                        message=st.session_state.text,
                                                                        attachment=filepath)
                    else:
                        zulip_response = zulip_integration.send_message(id=zulip_username, topic=zulip_topic,
                                                                        message=st.session_state.text)

                        # Check for Zulip API success
                        if zulip_response.get('result') != 'success':
                            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!\n{zulip_response.get('msg')}", icon='üö®')
                except Exception as e:
                    st.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n{e}', icon='üö®')
